//npx prisma generate
//npx prisma migrate dev --name init
//npx prisma db seed
//CMD+SHIFT+P developer -> restart window
//remove node_modules and npm install
//npx prisma studio

generator client {
  provider = "prisma-client-js"
  // output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // url      = "mysql://spilno_admin:Very_interesting_project!@spilnodb1.ccdv13yqnmn8.eu-north-1.rds.amazonaws.com:3306/spilnodb1"
}

enum ROLE {
  ADMIN
  MANAGER
  PARENT
  CHILD
}

model Account {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      ROLE
  createdAt DateTime  @default(now())
  Parent    Parent[]
  Child     Child[]
  Manager   Manager[]

  // @@unique([email, role])
}

model Parent {
  id                   Int                   @id @default(autoincrement())
  firstName            String
  lastName             String
  phone                String                @unique
  messenger            String
  terms                Boolean               @default(true)
  account              Account               @relation(fields: [accountId], references: [id])
  accountId            Int                   @unique
  createdAt            DateTime              @default(now())
  parentChildRelations ParentChildRelation[]

  @@unique([firstName, lastName, phone])
}

model Child {
  id                   Int                   @id @default(autoincrement())
  firstName            String
  lastName             String
  dob                  String
  gender               String
  city                 String
  allowPhoto           Boolean               @default(false)
  account              Account               @relation(fields: [accountId], references: [id])
  accountId            Int                   @unique
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  parentChildRelations ParentChildRelation[]
  courseChildRelation  CourseChildRelation[]

  @@unique([firstName, lastName, dob, gender])
}

model Course {
  id                  Int                   @id @default(autoincrement())
  title               String                @unique
  content             String?
  lowerAgeLimit       String?
  upperAgeLimit       String?
  createdAt           DateTime              @default(now())
  courseChildRelation CourseChildRelation[]
}

model ParentChildRelation {
  id        Int      @id @default(autoincrement())
  parents   Parent   @relation(fields: [parentId], references: [id])
  parentId  Int
  children  Child    @relation(fields: [childId], references: [id])
  childId   Int
  createdAt DateTime @default(now())

  @@unique([parentId, childId])
}

model CourseChildRelation {
  id        Int      @id @default(autoincrement())
  courses   Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  children  Child    @relation(fields: [childId], references: [id])
  childId   Int
  visitTime DateTime
  createdAt DateTime @default(now())
}

model Manager {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  // phone     String   @unique
  phone     String
  location  String
  isActive  Boolean
  account   Account  @relation(fields: [accountId], references: [id])
  accountId Int      @unique
  createdAt DateTime @default(now())

  @@unique([firstName, lastName, phone])
}
